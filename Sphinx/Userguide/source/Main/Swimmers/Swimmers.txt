.. _Swimmers:

Swimmer
=======

The hydrodynamical interaction of model shaped-anisotropic bacilliform are simulated using Active Dumbbell Swimmers (ADS) [Nash2008]_.

To model the bacilliform body of swimming microbes, an ADS model is proposed composed of two monomers (head and middle) simulating the body, subject to an explicit propulsion force applied in the dimer's polar axis. The two monomers are connected by a spring.  
The surrounding MPCD fluid sees these monomers point-particles, but excluded volume with other swimmers/obstacles (Lennord-Jones potential) can be turned on (default) or off.

The swimmers induce hydrodynamical forces on the surrounding MPCD fluid, which captures the far-flow field of swimming microbes.

The swimmer has a self-propulsion force, which is applied split evenly between the head and middle monomer to induce self-propulsion. Simultaneously, the head and middle monomer exert an equal drag force on the MPCD particles in the box they inhabit.
To make the sum of forces on the fluid force-free, an opposite force to these two drag forces is applied at a localized tail position. This induces the dipole force, which results in the far-flow field of swimming microbes. 

.. error::
    TYLER: Please add caption to figure. Also if have better quality picture, please add.

.. figure:: Swimmers/swimmerSchematic.jpg
    :alt: Logo
    :scale: 150%
    :align: center

.. image:: Swimmers/1.jpg
    :align: center

Besides that, the swimmer monomers are treated as other MD particles.

Swimmers are included in the code by adding the following input script into the input file

::

    "nSwim":            1,


Which sets the number of swimmers to 1. 

Extra parameters
----------------

Swimmers can have the following additional interactions:

* Swimmers can be made to be run-and tumbling. Through the tumble step, the spring constant and spring length are reduced, so that rotational diffusion is substantially increased. This mimics the tumble part.
* Swimemrs can induce rotlet torques on the surrounding fluid. The rotlet torque is applied om the head of the swimmer and an equal-but-opposite rotlet is applied on the tail position
* Swimmers can experience an external magnetic field through which they allign their orientation due to the magnetic moment, exerting a torque exerted on the swimmer due to the magnetic field and the swimmer alignment mismatch. 


Input Guide
-----------

::

    `typeSwim`      | int           | 2                  | Swimmer type. Default is a dumbell swimmer with excluded volume interactions

This sets type of swimmer. Default is dumbell swimmer with excluded volume (2). 
typeSwim=0 for a fixed swimmer. Important, is that the number of swimmers than needs to be 1. 
typeSwim=1 gives moving swimmers with no excluded volume interactions. 
typeswim=2 gives moving swimmers with excluded volume itneractions. 
typeswim=3 gives only one force on the head, in the direction of the head, producing a monopole force.
typeswim=4 Swimmers constrained to be near the y=0 (2D) or z=0 (3D) domain boundary.

::

    `fsSwim`        | double        | 20                 | Magnitude of swimmer propulsion force

Swimmer propulsion force. Sets propulsion speed of swimmers

::

    `dsSwim`        | double        | 1                  | Dipole strength

Distance from the middle (in multiples of head-middle length/spring seperation) where tail force is applied. (for a pusher DS>0; for a puller DS<0) 

::

    `kSwim`         | double        | 30                 | Spring constant
    `roSwim`        | double        | 4                  | Spring seperation

Spring constant and seperation. This sets the size of the swimmers. The roSwim should be the same as the monomer size. 
Springs are implemented using FENE chains. 

::

    `sigSwim`       | double        | 4                  | Diameter approx sigma

Size of excluded volume of the head/middle monomer part with other swimmers/MD particles. Only works if excluded volume is activated. This is implemented with a Lennord-Jones potential.

::

    `epsSwim`       | double        | 1                  | Interaction energy

Interaction strength of the Lennord-Jones potential used for excluded volume interaction (Lennord-Jones potential).

::

    `qDistSwim`     | int           | 0                  | Initial distribution of swimmer positions
    `oDistSwim`     | int           | 0                  | Initial distribution of swimmer orientations

These set the initial distribution of swimmer position (0: randomly placed within control volume, 1: Read from file, 2: Centre of controle volume) and swimmer orientation (0: random orientation, 1: x-aligned, 2: y-aligned, 3: z-algined, 4: 45 degrees angle. 5: randomly in XY-plane, 6: randomly in XZ-plane, 7: randomly in YZ-plane, 
8: Align all particles in the direction of origin towards positive right hand corner of any cartesian plane, 9: Align all particles in the direction of two oppositely charged defects.)

::

    `headMSwim`     | int           | 20                 | Mass of head monomer
    `midMSwim`      | int           | 20                 | Mass of middle monomer

Mass of swimmer. You want this to be around the density of the fluid. 

::

    `tsSwim`        | double        | 0                  | Magnitude of swimmer torque

Magnitude of torque to set the swimmers as rotlet dipole

::

    `hspIdSwim`     | int           | 1                  | Multiphase fluid particle type of the head monomer in the swimmer
    `mspIdSwim`     | int           | 1                  | Multiphase fluid particle type of the middle monomer in the swimmer

If multiphase enables, treat swimmer as this type. Currently, make sure both particles are same type.

::

    `runTSwim`      | double        | 0                  | Average run time in units of MPCD timesteps dt (iterations, not MPCD time units)
    `tumTSwim`      | double        | 0                  | Average tumble time in units of MPCD timesteps dt (iterations, not MPCD time units)

Run and tumble parameters. In order to make swimmers run and tumble, set runTSwim and tumTSwim to non-zero values. 
These set the average run and tumble time (in MPCD timesteps) that the particle runs and tumbles respectively. 
Run and tumble are stochastic processes, drawn from a stochastic exponential distribution.

::

    `springShrinkSwim`      | double        | 0.1                | How much the spring constant is shrunk when tumbling
    `sizeShrinkSwim`        | double        | 0.1                | How much do LJ sigma ro shrink when tumbling

Tumbling is implemented by reducing the sping size and particle size. For tumbling state, the spring is replaced with a Hookean spring.

::

    `shrTSwim`      | double        | 2                  | Set time to shrink/ extend in units of MPCD timesteps dt (iterations, not MPCD time units)

Shrinkage during tumbling is not instantaniously, rather it is done in smaller steps, which is set here.

::

    `magMomSwim`    | double        | 1                  | Magnetic moment/ strength

The strength of the magnetic moment on the swimmers (if magnetic field is applied.)

::

    `fixDistSwim`   | double        | 0                  | The fixed distance from the wall for `DUMBELL_NEARWALL` mode

Used for timeswim=4. 
