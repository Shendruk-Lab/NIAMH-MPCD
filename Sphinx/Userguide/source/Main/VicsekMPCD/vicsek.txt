.. vicsek:

This collission operator is based on the famous vicsek model of self-driven particles. It describes the collective behavior in the simplest possible way.  It was designed to explore how local interactions among simple, self-propelled particles can give rise to global order and collective motion.
Key Principles of the Vicsek Model:

- **Self-Propelled Particles**: The fundamental units in the Vicsek Model are self-propelled particles, often referred to as agents or individuals. These particles move at a constant speed and possess a heading direction, which can be influenced by their local neighbors.
- **Local Interaction**: Agents interact with their immediate neighbors within a defined radius, simulating a finite perception range. These interactions involve aligning their velocities and directions to some extent.
- **Noise**: The model incorporates a random noise factor to account for unpredictability and stochasticity in the behavior of real-world entities.
- **Order Parameter**: The degree of alignment among the agents is quantified using an "order parameter," which measures the average direction of motion across the group. This parameter helps to determine whether the system exhibits collective motion or remains in a disordered state.

MPCD employ a square-shaped cell. The particles are represented as continuously moving points on a plane, following a continuous trajectory (off-lattice).

.. image:: VicsekMPCD/VicsekMPCD.jpg

Particle Positions: The positions of individual particles at time :math:`t + 1` are updated based on their current positions and velocities. Each particle moves in the direction of its velocity vector by a certain distance:

.. math::
    :name: eq:positionVicsek

    \vec{r}_i(t+\Delta t) = \vec{r}_i(t)+\Delta t \cdot v_0 \cdot \vec{u}_i(t)

Where:

- :math:`\vec{r}_i(t+\Delta t)` is the position of particle :math:`i` at time :math:`t + \Delta t`.
- :math:`\vec{r}_i(t)` is the current position of particle :math:`i` at time :math:`t`.
- :math:`\Delta t` is the time step.
- :math:`v_0` is the constant speed of the particle.
- :math:`\vec{u}_i(t)` is the normalized velocity vector of particle :math:`i` at time :math:`t`.

Velocity Alignment: The velocity of each particle at time :math:`t + 1` is updated by averaging the velocities of its neighbors within a specified radius, and then normalizing the resulting velocity vector:

.. math::
    :name: eq:velocityVicsek

    \vec{u}_i(t+\Delta t) = \frac{1}{N_c} \sum_{j=1}^{N_c} \vec{u}_j(t) + \eta \cdot \Delta \Theta

Where:

- :math:`\vec{u}_i(t+\Delta t)` is the updated velocity vector of particle :math:`i` at time :math:`t + \Delta t`.
- :math:`N_c` is the number of neighbors within the cell :math:`c`.
- :math:`\vec{u}_j(t)` is the velocity vector of the :math:`j`-th neighboring particle at time :math:`t`.
- :math:`\eta` is a noise parameter that introduces random perturbations.
- :math:`\Delta \Theta` is a random angle drawn from a uniform distribution.

Example of json configuration for the VicsekMPCD simulation.
input.json

::

    {
        "comment": "Domain size of 100 by 100",
        "domain": [100, 100],
        "comment": "Number of steps which won`t be outputted the files",
        "warmUp": 0,
        "comment": "Numer of steps which will produce an output",
        "simSteps": 1000,
        "comment": "Classic Vicsek collision operator parameter",
        "collOp": 7,
        "species":
        [
            {
                "comment": "Particle density of 10 within square area",
                "dens": 10,
                "comment": "Particle`s mass",
                "mass": 1,
                "comment": "Particle activity, effectively is used as noise. But in the next form noise = 1.0 - act",
                "act": 0.5,
                "comment": "Random distribution function for particles",
                "qDist": 0
            }
        ],
        "comment": "Direction of gravitation force (or any other external force)",
        "grav": [0.0, 0.0, 0.0],
        "comment": "Direction of magnetic force",
        "mag": [0.0, 0.0, 0.0],
        "debugOut": 1,
        "comment": "Make output in coarsegrain.dat file each 10 simSteps",
        "coarseOut": 10,
        "comment": "Place periodic boundary conditions around the domain",
        "domainWalls": 1
    }

The main disadvantage of the vicsek collision operator is the luck of conservation laws. The one thing which is being conserved is the number of particles. However MPCD can propose modifications of the vicsek collision operator in order to apply conservation laws.

VicsekAnderson-MPCD
===================

This collision operator applies a thermostat to the simulation. The collision operator generates random velocity vectors for all the MPCD particles in the cell. The random velocitities are drawn from Gaussian distribtions with variance :math:`\sqrt{k_BT/m}` and so obey Maxwell-Boltzmann statistics. The average of the random velocities is then subtracted from all to conserve momentum. Energy is not conserved; rather the system is thermostatted to `KBT`. Also does not conserve angular momentum.
The VicsekAnderson collision operator is defined as follows:

.. math::
    :name: eq:vicsekAnderson

    \vec{v}_i(t + \Delta t) = \vec{v}_{cm} + \tau (\alpha \hat{v}_{cm} - \vec{v}_i(t)) + \vec{\xi}_i - \langle \vec{\xi} \rangle

Where:

- :math:`\vec{v}_{cm}` - represents the center of mass velocity of the cell.
- :math:`\hat{v}_{cm} = \vec{v}_{cm}/|v_{cm}|` - denotes the unit vector indicating the direction of the velocity.
- :math:`\vec{\xi}_i` - stands for a random velocity assigned to each particle.
- :math:`\langle \vec{\xi} \rangle` - signifies the cell average of random velocities.
- :math:`\tau` - is a relaxation rate parameter.
- :math:`\alpha` - represents the target speed.

Effectively, this collision operator computes a new velocity for each fluid particle within a cell. It is composed of the center of mass velocity of the cell, a random direction of the center of mass, minus the sum of all random velocities within the cell. Importantly, this collision operator conserves momentum, which leads to more physically realistic particle behavior.

Example of json configuration for the VicsekAndersenMPCD simulation.
input.json

::

    {
        "comment": "Domain size of 100 by 100",
        "domain": [100, 100],
        "comment": "KBT value for the system",
        "kbt": 1,
        "comment": "Temperature relaxation value",
        "tau": 0.5,
        "comment": "Number of steps which won`t be outputted the files",
        "warmUp": 0,
        "comment": "Numer of steps which will produce an output",
        "simSteps": 1000,
        "comment": "Classic Vicsek active Andersen Thermostat collision operator parameter",
        "collOp": 11,
        "species":
        [
            {
                "comment": "Particle density of 10 within square area",
                "dens": 10,
                "comment": "Particle`s mass",
                "mass": 1,
                "comment": "Particle activity, effectively is used as noise. But in the next form noise = 1.0 - act",
                "act": 0.5,
                "comment": "Random distribution function for particles",
                "qDist": 0
            }
        ],
        "comment": "Direction of gravitation force (or any other external force)",
        "grav": [0.0, 0.0, 0.0],
        "comment": "Direction of magnetic force",
        "mag": [0.0, 0.0, 0.0],
        "debugOut": 1,
        "comment": "Make output in coarsegrain.dat file each 10 simSteps",
        "coarseOut": 10,
        "comment": "Place periodic boundary conditions around the domain",
        "domainWalls": 1
    }

The Anderson-MPCD algorithm discussed so far conserves mass, energy and translational momentum but, just like the Vicsek collision operator, it does not conserve angular momentum. However, it can be extended to do so.

VicsekLangevin-MPCD
===================
In conserving the angular momentum of the cell, the position of each fluid particle relative to the centre of mass of the cell :math:`\vec{x}^{'}_i = \vec{x}_i + \vec{x}^{cm}` is important. The VicseAndersen-MPCD algorithm creates a small change in angular momentum every collision step. Let this amount be denoted :math:`\delta \vec{L}`. This angular momentum can be exactly cancelled out by giving the entire cell an appropriate angular velocity :math:`\vec{\omega}`. If the set of particles in the cell have a moment of inertia tensor :math:`\hat{I}` about the centre of mass then the angular velocity needed to cancel the residual angular momentum is :math:`\vec{\omega} = \hat{I}^{-1} \cdot \delta \vec{L}`.
The collision operator is expressed as follows:

.. math::
    :name: eq:vicsekLangevin

    \vec{v}_i(t+\Delta t) = a\vec{v}_i(t) + b\vec{\xi}_i

Where:

- :math:`a = \frac{2m- \gamma \Delta t}{2m+ \gamma \Delta t}`.
- :math:`b = \frac{2\sqrt{\gamma \Delta t}}{2m + \gamma \Delta t}`.
- :math:`m` is the mass of the particle.
- :math:`\vec{v}_i` is the velocity of the particle.
- :math:`\vec{v}_{cm}` stands for the center of mass velocity of the cell.
- :math:`N_c` is the number of particles in the cell.
- :math:`\gamma` constant which is represent resistive, viscous force that opposes the motion of the fluid particles.
- :math:`\vec{\xi}_i` white noise constant.

Example of json configuration for the VicsekLangevinMPCD simulation.
input.json

::

    {
        "comment": "Domain size of 100 by 100",
        "domain": [100, 100],
        "comment": "KBT value for the system",
        "kbt": 1,
        "comment": "Temperature relaxation value",
        "tau": 0.5,
        "comment": "Friction coefficient for Langevin thermostat",
        "fricCoef": 1.0,
        "comment": "Number of steps which won`t be outputted the files",
        "warmUp": 0,
        "comment": "Numer of steps which will produce an output",
        "simSteps": 1000,
        "comment": "Classic Vicsek active Langevin collision operator parameter",
        "collOp": 12,
        "species":
        [
            {
                "comment": Particle density of 10 within square area",
                "dens": 10,
                "comment": "Particle`s mass",
                "mass": 1,
                "comment": "Particle activity, effectively is used as noise. But in the next form noise = 1.0 - act",
                "act": 0.5,
                "comment": "Random distribution function for particles",
                "qDist": 0
            }
        ],
        "comment": "Direction of gravitation force (or any other external force)",
        "grav": [0.0, 0.0, 0.0],
        "comment": "Direction of magnetic force",
        "mag": [0.0, 0.0, 0.0],
        "debugOut": 1,
        "comment": "Make output in coarsegrain.dat file each 10 simSteps",
        "coarseOut": 10,
        "comment": "Place periodic boundary conditions around the domain",
        "domainWalls": 1
    }