Requirements
------------

The implicit representation for the surface has the property that

* :math:`S(\vec{x}) > 0`, a point is outside the surface
* :math:`S(\vec{x}) = 0`, a point is on the surface
* :math:`S(\vec{x}) < 0`, a point is inside the surface.

Following a streaming step, boundary conditions are applied to an MPCD particle if the particle has passed inside a boundary.
For a particle :math:`i` with position :math:`\vec{x}_i` this condition is

.. math::
    :name: eq:bccondition

    S(\vec{x}_i) \leq 0

Boundary conditions are only applied to a particle when the position is exactly on the surface,
which requires tracing back the particle's position :math:`\vec{x}_i^*` to where :math:`S(\vec{x}_i^*) = 0`
at time :math:`t^*` where :math:`0<t^*<\delta t`.
Following boundary rules, the particle resumes streaming for the remaining time :math:`\delta t-t^*`.

Boundary operators
------------------

Boundary rules are operators on a particle's position, velocity or orientation properties.

For a property :math:`\vec{f}_i (t)`, the rules have the following form

.. math::
    :name: eq:bcoperators1

    \vec{f}_i(t>t^*) \: \text{+=} \: D_{f,\hat{\nu}}\hat{\nu}

.. math::
    :name: eq:bcoperators2

    \vec{f}_i(t>t^*) \: \text{+=} \: M_{f,\hat{\nu}} \vec{f}_{i,\hat{\nu}}(t<t^*)

where :math:`\hat{\nu}` are implemented as each of the cartesian axes :math:`\hat{x},\hat{y},\hat{z}`, the local surface normal :math:`\hat{n}` and the local surface tangent :math:`\hat{t}`.
The properties before and after the boundary rules are applied are :math:`\vec{f}_i(t<t^*)` and :math:`\vec{f}_i(t>t^*)`.
The shift operator :ref:`(19) <eq:bcoperators1>` is an additive shift on vector :math:`\vec{f}_i` in direction :math:`\hat{\nu}` with magnitude :math:`D_{f,\hat{\nu}}`.
and :ref:`(20) <eq:bcoperators2>` is a scalar multiplier :math:`M_{f,\hat{\nu}}` on the projection :math:`\vec{f}_{i,\hat{\nu}}` of the property :math:`\vec{f}_i` in the direction :math:`\hat{\nu}`.

Examples
^^^^^^^^

Defaults for no applied conditions are :math:`D_{f,\hat{\nu}} = 0` and :math:`M_{f,\hat{\nu}} = 1`,
leaving all components of :math:`f_i` unchanged and without shifts.
Commonly used boundary rules are:

1. **Position**

  **Periodic boundary conditions**

  Extended geometries, such as pipe or channel flows, often use periodic boundary conditions.
  They simulate open systems. In order to achieve periodicity,
  a planar boundary surface are created with :math:`D_{x,\hat{n}}=L` as a shift equivalent to the system dimension.

  .. figure:: BC/bc_images/PBCschematic.png
     :alt: Logo
     :scale: 15%
     :align: center

     CAPTION
  
  ::

    "comment":          "Periodic boundary conditions on the domain",
    "domainWalls":      1,

2. **Velocity**

  **Perfect-slip**

  DESCRIPTION OF PERFECT SLIP.
  Perfect-slip utilises *reflective* boundary rules to the velocity.
  The normal component of the velocity is reversed :math:`M_{v,\hat{n}} = -1`,
  while the tangential component is unchanged :math:`M_{v,\hat{t}} = 1`.

  .. figure:: BC/bc_images/perfectslip.png
     :alt: Logo
     :scale: 20%
     :align: center

     CAPTION
  Snippet of code to be appended in relevant BC declaration:
  ::

    "comment":          "Perfect slip BC",
    "MVN":      -1,
    "MVT":      1,

  **No slip**

  No-slip refers to any impermeable boundary condition that brings the velocity of the fluid to zero at the wall.
  Achieving no-slip utilises *bounce-back* boundary rules to the velocity,
  reversing the normal and tangential component of the velocity so that :math:`M_{v,\hat{n}} = M_{v,\hat{t}} = -1`.

  .. figure:: BC/bc_images/noslip.png
     :alt: Logo
     :scale: 20%
     :align: center

     CAPTION

  Snippet of code to be appended in relevant BC declaration:
   ::

    "comment":          "No slip BC",
    "MVN":      -1,
    "MVT":      -1,

3. **Orientation**

For liquid crystalline fluids, boundary conditions (or anchoring conditions)
can be applied so that the particle orientation :math:`\hat{u}_i` aligns in the normal direction to the boundary (homeotropic)
or tangential with the boundary (planar).

  **Homeotropic**

  Alignment normal to the boundary requires :math:`M_{v,\hat{n}} = 1` and :math:`M_{v,\hat{t}} = 0`.

  .. figure:: BC/bc_images/homeotropic.png
     :alt: Logo
     :scale: 20%
     :align: center

     CAPTION

  Snippet of code to be appended in relevant BC declaration:
  ::

    "comment":          "Homeotropic anchoring",
    "MVN":      1,
    "MVT":      0,

  **Planar**

  Alignment tangential to the boundary requires :math:`M_{v,\hat{n}} = 0` and :math:`M_{v,\hat{t}} = 1`.

  .. figure:: BC/bc_images/planar.png
     :alt: Logo
     :scale: 20%
     :align: center

     CAPTION

  Snippet of code to be appended in relevant BC declaration:
  ::

    "comment":  "Planar anchoring",
    "MVN":      0,
    "MVT":      1,

Boundary corrections
--------------------

Ghost particles
^^^^^^^^^^^^^^^

The random grid shifts (for Galilean invariance) can result in fluid cells being intersected by the boundary,
reducing the cell's population below the average number density.
With fewer particles in the cell, the centre of mass velocity :math:`\vec{v}^{\mathrm{cm}}_c` can fail to satisfy no-slip.
A standard method to correct no-slip, so that :math:`\vec{v}^{\mathrm{cm}}_c \approx 0`,
is to fill the cell with :math:`N_\mathrm{ghost} =\langle N_c \rangle - N_c` virtual particles so that the effective cell density :math:`N_c` is equal to the average density :math:`\langle N_c \rangle`.

.. error::
  TYLER: multiple equations named "eq:virtualparticles". Gave numbers. Give better names.

.. math::
  :name: eq:virtualparticles1

  \vec{v}^{\mathrm{cm}}_c = \frac{1}{N_c}\left(\sum_{i=1}^{N_c} \vec{v_i} + \sum_{j=1}^{N_{\mathrm{ghost}}} \vec{v_j}^{\mathrm{ghost}} \right)

Each of these virtual particles :math:`\vec{v_j}^{\mathrm{ghost}}` have a velocity drawn from a Maxwell Boltzmann distribution about zero with the same temperature of the fluid, :math:`k_B T`.
Instead of determining each ghost particle's velocity individually,
a simpler method is instead to select the entire correction :math:`\vec{v}^{\mathrm{ghost}}`
from a Maxwell Boltzmann distribution about zero but with a variance of :math:`N_{\mathrm{ghost}} k_B T`.

.. math::
  :name: eq:virtualparticles2

  \vec{v}^{\mathrm{cm}}_c = \frac{1}{N_c}\left(\sum_{i=1}^{N_c} \vec{v_i} + \vec{v}^{\mathrm{ghost}} \right)

REFERENCE PAPERS FOR THIS

Ghost particles are turned on for each boundary through the ``phantom`` tag.
::

    "BC":
        [
            "phantom":      1,          "this is 0 for off and 1 for on"
        ]


Strong anchoring
^^^^^^^^^^^^^^^^

Since orientation boundary conditions are only applied to the subset of particles :math:`N_{c*} \leq N_c` that violate the surface boundary equation :math:`S(\vec{x})\leq0`,
the cell director :math:`\hat{n}_c` mixes between the anchored and un-anchored orientations.
The effective anchoring strength is therefore heavily dependent on the proportion :math:`N_{c*} / N_c`, with strongest anchoring acheived when :math:`N_{c*} = N_c`.
To strengthen the effective anchoring, we apply the orientation boundary condition to all :math:`N_c` particles.

Strong anchoring is turned on for each boundary through the ``phantom`` tag.
::

    "BC":
        [
            "phantom":      1,          "this is 0 for off and 1 for on"
        ]
