Requirements
------------

The implicit representation for the surface has the property that

* :math:`S(\vec{x}) > 0`, a point is **outside** the surface
* :math:`S(\vec{x}) = 0`, a point is **on** the surface
* :math:`S(\vec{x}) < 0`, a point is **inside** the surface.

Following a streaming step, boundary conditions are applied to an MPCD particle if the particle has passed inside a boundary.
For a particle :math:`i` with position :math:`\vec{x}_i` this condition is

.. math::
    :name: eq:bccondition

    S(\vec{x}_i) \leq 0

Boundary conditions are only applied to a particle when the position is exactly on the surface,
which requires tracing back the particle's position :math:`\vec{x}_i^*` to where :math:`S(\vec{x}_i^*) = 0`
at time :math:`t^*` where :math:`0<t^*<\delta t`.
Following boundary rules, the particle resumes streaming for the remaining time :math:`\delta t-t^*`.

Boundary operators
------------------

Boundary rules are operators on a particle's position :math:`\vec{x}_i`, velocity :math:`\vec{v}_i` or orientation properties :math:`\hat{u}_i`.

For a general property :math:`\vec{f}_i (t)`, the rules have the following form

.. math::
    :name: eq:bcoperators1

    \vec{f}_i(t>t^*) \: \text{+=} \: D_{f,\hat{\nu}}\hat{\nu}

.. math::
    :name: eq:bcoperators2

    \vec{f}_i(t>t^*) \: \text{+=} \: M_{f,\hat{\nu}} \vec{f}_{i,\hat{\nu}}(t<t^*)

where :math:`\hat{\nu}` are implemented as each of the cartesian axes :math:`\hat{x},\hat{y},\hat{z}`, the local surface normal :math:`\hat{n}` and the local surface tangent :math:`\hat{t}`.
The properties before and after the boundary rules are applied are :math:`\vec{f}_i(t<t^*)` and :math:`\vec{f}_i(t>t^*)`.
The :ref:`shift operator<eq:bcoperators1>` is an additive shift on vector :math:`\vec{f}_i` in direction :math:`\hat{\nu}` with magnitude :math:`D_{f,\hat{\nu}}`
and the :ref:`multiplier operator <eq:bcoperators2>` :math:`M_{f,\hat{\nu}}` acts on the projection :math:`\vec{f}_{i,\hat{\nu}}` of the property :math:`\vec{f}_i` in the direction :math:`\hat{\nu}`.

Examples
^^^^^^^^

Defaults for no applied conditions are :math:`D_{f,\hat{\nu}} = 0` and :math:`M_{f,\hat{\nu}} = 1`,
leaving all components of :math:`f_i` unchanged and without shifts.
The default operator values in the input scripts are shown below, which can be edited to define particular boundary condition.

::

  {
    "comment":      "position operators",
    DN	0	    "position shift in normal direction",
    DT	0           "position shift in tangential direction",

    "comment":      "velocity operators",
    DVN	0	    "velocity added in the normal direction",
    DVT	0	    "velocity added in the tangential direction",
    DVxyz [0,0,0]   "velocity added in the [x,y,z] cartesian directions",

    MVN 1           "multiplies velocity in normal direction",
    MVT 1           "multiplies velocity in tangential direction",
    MVxyz [1,1,1]   "multiplies velocity in cartesian direction",

    "comment":      "orientation operators",
    DUxyz [0,0,0]   "orientation added in the [x,y,z] cartesian directions",
    MVN 1           "multiplies orientation in normal direction",
    MVT 1           "multiplies orientation in tangential direction",
    MVxyz [1,1,1]   "multiplies velocity in cartesian direction"
  }

Commonly used boundary rules are:

1. **Position**

  **Periodic boundary conditions**

  Extended geometries, such as open systems or channel flows, often use periodic boundary conditions.
  Periodic boundary conditions makes it possible to approximate an infinite system by wrapping coordinates around by their boundaries.
  In order to achieve periodicity,
  a planar boundary surface are created with :math:`D_{x,\hat{n}}=L` as a shift equivalent to the system dimension.

  .. figure:: BC/bc_images/PBCschematic.png
     :alt: Logo
     :scale: 15%
     :align: center

     *Example of a particle that passes through a through a periodic boundary.*
     *The particle rewinds back to the point on the surface, and a shift is applied*
     *in the surface normal direction that takes the particle to the left side.*
     *There, the particle resumes streaming for time* :math:`\delta t-t^*`.

  Periodic boundary conditions are implemented as the default boundary conditions (so no boundaries required in input scripts).
  An example of the manual input for periodic boundary conditions on the left and right wall would be

  ::

    {
    "comment":      "Left PBC",
    "phantom":      0,              "Ghost particles turned off (only required for solid boundaries)",
    "Q":            [0, 0, 0],      "Located on left-hand side of simulation domain ",
    "aInv":         [1, 0, 0],      "Normal vector faces right-ward",
    "P":            [1, 1, 1, 1],   "Surface power = 1 (plane)",
    "R":            0,              "Position - easiest to set to zero if using Q to define distance from origin",
    "DN":           Lx,             "Shift particle position by Lx in the direction of surface normal (shift right by Lx)",
    "DT":           0,              "No shift in tangent direction"
    },
    {
    "comment":      "Right PBC",
    "phantom":      0,              "Ghost particles turned off (only required for solid boundaries)",
    "Q":            [Lx, 0, 0],     "Located on right-hand side of simulation domain ",
    "aInv":         [-1, 0, 0],     "Normal vector faces left-ward",
    "P":            [1, 1, 1, 1],   "Surface power = 1 (plane)",
    "R":            0,              "Position - easiest to set to zero if using Q to define distance from origin",
    "DN":           Lx,             "Shift particle position by Lx in the direction of surface normal (shift left by Lx)",
    "DT":           0,              "No shift in tangent direction"
    }



2. **Velocity**

  **Perfect-slip**

  Perfect-slip rules are suitable for solid boundaries where viscous effects at the wall are negligible (shear stress at the boundary is zero).
  Achieving perfect-slip utilises *reflective* boundary rules to the velocity.
  The normal component of the velocity is reversed :math:`M_{v,\hat{n}} = -1`,
  while the tangential component is unchanged :math:`M_{v,\hat{t}} = 1`.

  .. figure:: BC/bc_images/perfectslip.png
     :alt: Logo
     :scale: 20%
     :align: center

  In the input files, perfect slip can be enabled by
  ::

    "comment":          "Perfect slip BC",
    "MVN":      -1,
    "MVT":      1,

  **No slip**

  No-slip refers to any impermeable boundary condition that brings the velocity of the fluid to zero at the wall.
  Achieving no-slip utilises *bounce-back* boundary rules to the velocity [Allahyarov2002]_,
  reversing the normal and tangential component of the velocity so that :math:`M_{v,\hat{n}} = M_{v,\hat{t}} = -1`.

  .. figure:: BC/bc_images/noslip.png
     :alt: Logo
     :scale: 20%
     :align: center

  In the input files, no-slip can be enabled by
  ::

   "comment":          "No-slip BC",
   "MVN":      -1,
   "MVT":      -1,

3. **Orientation**

For liquid crystalline fluids, boundary conditions (or anchoring conditions)
can be applied so that the particle orientation :math:`\hat{u}_i` aligns in the normal direction to the boundary (homeotropic)
or tangential with the boundary (planar).

  **Homeotropic**

  Alignment normal to the boundary requires :math:`M_{v,\hat{n}} = 1` and :math:`M_{v,\hat{t}} = 0`.

  .. figure:: BC/bc_images/homeotropic.png
     :alt: Logo
     :scale: 20%
     :align: center

  In the input files, homeotropic anchoring can be enabled by
  ::

    "comment":          "Homeotropic anchoring",
    "MUN":      1,
    "MUT":      0,

  **Planar**

  Alignment tangential to the boundary requires :math:`M_{v,\hat{n}} = 0` and :math:`M_{v,\hat{t}} = 1`.

  .. figure:: BC/bc_images/planar.png
     :alt: Logo
     :scale: 20%
     :align: center

  In the input files, planar anchoring can be enabled by

  ::

    "comment":           "Planar anchoring",
    "MUN":      0,
    "MUT":      1,

Boundary corrections
--------------------

Ghost particles
^^^^^^^^^^^^^^^

The random grid shifts (for Galilean invariance) can result in fluid cells being intersected by the boundary,
reducing the cell's population below the average number density.
With fewer particles in the cell, the centre of mass velocity :math:`\vec{v}^{\mathrm{cm}}_c` can fail to satisfy no-slip [Lamura2001]_.
A standard method to correct no-slip, so that :math:`\vec{v}^{\mathrm{cm}}_c \approx 0`,
is to fill the cell with :math:`N_\mathrm{ghost} =\langle N_c \rangle - N_c` virtual particles so that the effective cell density :math:`N_c` is equal to the average density :math:`\langle N_c \rangle`.

.. math::
  :name: eq:virtualparticles1

  \vec{v}^{\mathrm{cm}}_c = \frac{1}{N_c}\left(\sum_{i=1}^{N_c} \vec{v_i} + \sum_{j=1}^{N_{\mathrm{ghost}}} \vec{v_j}^{\mathrm{ghost}} \right)

Each of these virtual particles :math:`\vec{v_j}^{\mathrm{ghost}}` have a velocity drawn from a Maxwell Boltzmann distribution about zero with the same temperature of the fluid, :math:`k_B T`.
Instead of determining each ghost particle's velocity individually,
a simpler method is instead to select the entire correction :math:`\vec{v}^{\mathrm{ghost}}`
from a Maxwell Boltzmann distribution about zero but with a variance of :math:`N_{\mathrm{ghost}} k_B T` [Lamura2002]_.

.. math::
  :name: eq:virtualparticles2

  \vec{v}^{\mathrm{cm}}_c = \frac{1}{N_c}\left(\sum_{i=1}^{N_c} \vec{v_i} + \vec{v}^{\mathrm{ghost}} \right)

Ghost particles are turned on for each boundary through the ``phantom`` tag.

::

    "BC":
        [
            "phantom":      1,          "this is 0 for off and 1 for on"
        ]


.. warning::
  Ghost particles should be turned on for any solid boundary (e.g. no-slip, perfect slip).
  Without it, the reduced particle density in cells leads to a lower viscosity in the proximity of walls.

Strong anchoring
^^^^^^^^^^^^^^^^

Since orientation boundary conditions are only applied to the subset of particles :math:`N_{c*} \leq N_c` that violate the surface boundary equation :math:`S(\vec{x})\leq0`,
the cell director :math:`\hat{n}_c` mixes between the anchored and un-anchored orientations.
The effective anchoring strength is therefore heavily dependent on the proportion :math:`N_{c*} / N_c`, with strongest anchoring acheived when :math:`N_{c*} = N_c`.
To strengthen the effective anchoring, we apply the orientation boundary condition to all :math:`N_c` particles [Head2023]_.

Strong anchoring is applied by default for solid boundaries, but requires the ``phantom`` tag to be turned on.
::

    "BC":
        [
            "phantom":      1,          "this is 0 for off and 1 for on"
        ]
