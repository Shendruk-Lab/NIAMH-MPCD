All boundaries are defined by an implicit surface equation :math:`S(\vec{x})=0`,
where :math:`\vec{x}= (x,y,z)` are points on the surface.
There are multiple forms of implemented surfaces, which can be combined (setting non-zero surface parameters) or removed (setting surface parameters to zero).

Standard surfaces
-----------------

Standard surfaces have the form,

.. math::
    :name: eq:surface

    S^S(\vec{x})=[A_x\left(x-Q_x\right)]^{p_x} + [A_y\left(y-Q_y\right)]^{p_y} + [A_z\left(z-Q_z\right)]^{p_z} - R^{p_R} = 0

where the surface parameters represent the surface position's :math:`\vec{Q}=(Q_x,Q_y,Q_z)`,
surface coefficient's :math:`\vec{A}=(A_x,A_y,A_z)`, surface power's :math:`(p_x,p_y,p_z,p_R)` and radius :math:`R`.
Writing surfaces in this way is versatile and enables :ref:`planes<eq:surfaceplane1>`, :ref:`spheres<eq:surfacesphere>`, :ref:`ellipsoids<eq:surfaceellipsoid>`, :ref:`cylinders<eq:surfacecylinder>`, :ref:`squircles<eq:surfacesquircle>` and :ref:`superellipsoids<eq:surfacesuperellipsoid>` to be created

Boundary properties can be created inside the input, using

::

  "BC":
  [
    {
      "comment":      "Boundary properties",
      "Q":            [Qx, Qy, Qz],
      "aInv":         [Ax, Ay, Az],
      "P":            [px, py, pz, pR],
      "R":            R
    }
  ],

.. note::
  2D surfaces can be defined using the same surface parameters as 3D.
  These are slices of 3D surfaces in the :math:`xy` plane, where :math:`z=0`.

1. **Plane**

  To construct a plane, set :math:`p_x=p_y=p_z=p_R=1`,
  :math:`Q_x=Q_y=Q_z=0` and :math:`R=d` to give the surface equation

  .. math::
      :name: eq:surfaceplane1

      S(\vec{x})= A_x x + A_y y + A_z z  - d = 0

  Describing a plane with normal vector :math:`\hat{n} = (A_x,A_y,A_z)` and located at a distance :math:`d` from the origin.
  Alternatively, can write the surface equation with :math:`R=0` so that

  .. math::
      :name: eq:surfaceplane2

      S(\vec{x})= A_x (x-Q_x) + A_y(y-Q_y) + A_z (z-Q_z) = 0

  with the perpendicular distance from the origin as :math:`A \cdot Q = d`.

  .. figure:: BC/bc_images/Plane.png
     :alt: Logo
     :scale: 30%
     :align: center

  An example input for a plane with the normal :math:`\hat{n}=(0,1,0)`, located at a distance :math:`L_y` from the origin,

  ::

    {
      "comment":      "Plane BC",
      "Q":            [0, 0, 0],
      "aInv":         [0, 1, 0],
      "P":            [1, 1, 1, 1],
      "R":            Ly
    }

2. **Sphere**

  To construct a sphere, :math:`p_x=p_y=p_z=p_R=2`,
  :math:`A_x=A_y=A_z=1` and :math:`R\neq0` to give the surface equation

  .. math::
      :name: eq:surfacesphere

      S(\vec{x})= \left(x-Q_x\right)^2 + \left(y-Q_y\right)^2 + \left(z-Q_z\right)^2  - R^2 = 0

  Describing a sphere centred at :math:`\vec{Q} = (Q_x,Q_y,Q_z)` with a radius :math:`R`.

  .. figure:: BC/bc_images/Sphere.png
     :alt: Logo
     :scale: 30%
     :align: center

  An example input for a sphere with the centre coordinate :math:`\vec{Q}=(Q_x,Q_y,Q_z)` can be constructed with the input parameters:

  ::

    {
      "comment":      "Sphere BC",
      "Q":            [Qx, Qy, Qz],
      "aInv":         [1, 1, 1],
      "P":            [2, 2, 2, 2],
      "R":            radius of sphere
    }

3. **Ellipsoid**

  To construct an ellipsoid, :math:`p_x=p_y=p_z=p_R=2` and
  :math:`A_x=\frac{1}{a}, A_z=\frac{1}{b}, A_z=\frac{1}{c}` and :math:`R=1` to give the surface equation

  .. math::
      :name: eq:surfaceellipsoid

      S(\vec{x})= \left(\frac{x-Q_x}{a}\right)^2 + \left(\frac{y-Q_y}{b}\right)^2 + \left(\frac{z-Q_z}{c}\right)^2  - 1 = 0

  Describing an ellipsoid centred at :math:`\vec{Q} = (Q_x,Q_y,Q_z)` with principle semi-axes :math:`a, b, c`.

  .. figure:: BC/bc_images/Ellipsoid.png
     :alt: Logo
     :scale: 30%
     :align: center

  An example ellipsoid input,
  ::

    {
      "comment":      "Ellipsoid BC",
      "Q":            [Qx, Qy, Qz],
      "aInv":         [1/a, 1/b, 1/c],
      "P":            [2, 2, 2, 2],
      "R":            1
    }

4. **Cylinder**

  A cylinder aligned along :math:`\hat{e}_z` can be constructed using :math:`p_x=p_y=p_R=2`, :math:`A_x=A_y=1, A_z=0` and :math:`R\neq 0`.

  .. math::
      :name: eq:surfacecylinder

      S(\vec{x})= \left(x-Q_x\right)^2 + \left(y-Q_y\right)^2 - R^2 = 0

  Describing an cylinder centred at :math:`\vec{Q} = (Q_x,Q_y)` on the :math:`xy` plane with radius :math:`R`.

  .. figure:: BC/bc_images/Cylinder.png
     :alt: Logo
     :scale: 30%
     :align: center

  An example cylinder input,
  ::

    {
      "comment":      "Cylinder BC",
      "Q":            [Qx, Qy, Qz],
      "aInv":         [1, 1, 0],
      "P":            [2, 2, 2, 2],
      "R":            radius of cylinder
    }


5. **Squircle**

  A squircle is a surface that is intermediate between a sphere and a cube.
  The construction of a squircle has :math:`p_x=p_y=p_z=p_R=4` and :math:`A_x=A_y=A_z=1`

  .. math::
      :name: eq:surfacesquircle

      S(\vec{x})= \left(x-Q_x\right)^4 + \left(y-Q_y\right)^4 + \left(z-Q_z\right)^4  - R^4 = 0

  Describing a squircle centred at :math:`\vec{Q} = (Q_x,Q_y,Q_z)` with a minor radius :math:`R`.

  .. figure:: BC/bc_images/Squircle.png
     :alt: Logo
     :scale: 30%
     :align: center


  An example squircle input,
  ::

    {
      "comment":      "Squircle BC",
      "Q":            [Qx, Qy, Qz],
      "aInv":         [1, 1, 1],
      "P":            [4, 4, 4, 4],
      "R":            Minor radius
    }

6. **Superellipsoid**

  A superellipse is a closed surface that resembles an ellipse, featuring a semi-major axis and semi-minor axis, but with different shape.
  The construction of a superellipse has :math:`p_x=p_y=p_z=p_R=n` and
  :math:`A_x=\frac{1}{a}, A_z=\frac{1}{b}, A_z=\frac{1}{c}` and :math:`R=1`.
  A super ellipsoid provide an increasingly closer approximation to a cuboid for large positive :math:`n`.

  .. math::
      :name: eq:surfacesuperellipsoid

      S(\vec{x})= \left(\frac{x-Q_x}{a}\right)^n + \left(\frac{y-Q_y}{b}\right)^n + \left(\frac{z-Q_z}{c}\right)^n  - 1 = 0

  .. figure:: BC/bc_images/SuperEllipsoid.png
     :alt: Logo
     :scale: 30%
     :align: center

  An example superellipsoid input,
  ::

    {
      "comment":      "Superellipsoid BC",
      "Q":            [Qx, Qy, Qz],
      "aInv":         [1/a, 1/b, 1/c],
      "P":            [n, n, n, n],
      "R":            1,
    }

Additional surface forms
------------------------

MPCD boundaries are versatile and many possible surface geometries can be implemented.

Wavy surfaces
^^^^^^^^^^^^^

Modulated planes, spheres and cylinders can be created with surface equations :math:`S(\vec{x})=S^S(\vec{x})+S^W(\vec{x})`, combining standard surfaces :math:`S^{S}(\vec{x})` with a wavy component :math:`S^{W}(\vec{x})` [Wamsler2023]_.
For a surface indexed by :math:`b`, wavy surfaces are implemented with the form

.. math::
    :name: eq:surfacewavy

    S^{W}_b(\vec{x})= B_{b,0}\cos(B_{b,1}S_{b,1}(\vec{x}))\cos(B_{b,2}S_{b,2}(\vec{x}))

where :math:`B_{b,0}` is a modulation amplitude, :math:`B_{b,1}` and :math:`B_{b,2}`
are modulation frequencies, and :math:`S_{b,1}` and :math:`S_{b,2}` define the orientation of the modulation.
By setting one of :math:`B_{b,1}` and :math:`B_{b,2}` to zero, surfaces can be given waves in one axis (corrugated),
while when both frequencies are non-zero, surfaces take on double modulated surfaces.

The wavy surfaces can be used in the input scripts as

::

  {
    "comment":              "Wavy BC",
    Wavy  [B0,B1,B2]        "B0 = amplitube, B1,B2 = wave frequencies"
  }

Depending on the combined :ref:`standard surface<eq:surface>` :math:`S^{S}(\vec{x})`,
the orientation equations :math:`S_{b,1}(\vec{x})` and :math:`S_{b,2}(\vec{x})` are given different forms, as outlined below.

1. **Wavy planes**

  For wavy planes, the orientation functions take the form

  .. math::
      :name: eq:planewavyS1

      S_{b,1}(\vec{x}) &= \frac{A_y x - A_x y}{\sqrt{A_x^2+ A_y^2}} \\
      S_{b,2}(\vec{x}) &= \frac{A_x A_z x + A_y A_z y - (A_x^2 + A_y^2) z}{\sqrt{A_x^4 + A_y^4 + 2 A_x^2 A_z^2 + 2 A_y^2 A_z^2 + 2 A_x^2 A_y^2}}

  where :math:`S_{b,1}` generates longitudinal waves (number set by the frequency :math:`B_{b,1}`) and :math:`S_{b,2}(\vec{x})` creates latitudinal waves (number set by the frequency :math:`B_{b,2}\neq0`).

  The accompanying standard surface :math:`S^S(\vec{x})`, defines the :ref:`plane<eq:surfaceplane1>`.

  .. list-table::
      :header-rows: 0
      :widths: 20 20
      :align: center

      * - .. image:: BC/bc_images/WavyPlane.png
              :width: 95%
              :align: center

        - .. image:: BC/bc_images/EggPlane.png
              :width: 95%
              :align: center

      * - Corrugated plane for either :math:`B_{b,1}\neq 0` or :math:`B_{b,2}\neq 0`.

          *This example has* :math:`B_{b,0} = 0.2`, :math:`B_{b,1} = 10`, :math:`B_{b,2} = 0`
          *and* :math:`\vec{A}=(0,1,0)`, *to define a plane with normal in* :math:`\hat{y}` *that has transverse modulation in* :math:`\hat{x}` *direction with amplitude* :math:`0.2`.

        - Egg carton plane for both :math:`B_{b,1}\neq 0` and :math:`B_{b,2}\neq 0`.

          *This example has* :math:`B_{b,0} = 0.2`, :math:`B_{b,1} = 10`, :math:`B_{b,2} = 10`
          *and* :math:`\vec{A}=(0,1,0)`, *to define a plane with normal in* :math:`\hat{y}` *that has transverse modulation in* :math:`\hat{x}` *and* :math:`\hat{z}` *direction with amplitude* :math:`0.2`.


2. **Wavy spheres**

  For wavy spheres, the orientation functions take the form

  .. math::
      :name: eq:spherewavyS1

      \tan S_{b,1}(\vec{x}) &= \frac{A_y y - Q_y}{A_x x - Q_x} \\
      \tan S_{b,2}(\vec{x}) &= \frac{\sqrt{A_x^2(x-Q_x)^2 + A_y^2(y-Q_y)^2}}{A_z(z-Q_z)}

  where :math:`S_{b,1}` generates longitudinal waves (number set by the frequency :math:`B_{b,1}`) and :math:`S_{b,2}(\vec{x})` creates latitudinal waves (number set by the frequency :math:`B_{b,2}\neq0`).

  .. The number of waves defined by :math:`S_{b,1}(\vec{x})` corresponds to the number as one moves around a longitudinal 2 pi circuit, and likewise for latitude.

  The accompanying standard surface :math:`S^S(\vec{x})`, defines the :ref:`sphere<eq:surfacesphere>`.

  .. list-table::
      :header-rows: 0
      :widths: 30 30 30
      :align: center

      * - .. image:: BC/bc_images/LatitudeSphere.png
              :width: 95%
              :align: center

        - .. image:: BC/bc_images/LongitudinalSphere.png
              :width: 95%
              :align: center

        - .. image:: BC/bc_images/eggCartonSphere.png
              :width: 95%
              :align: center

      * - Latitudinal waves for :math:`B_{b,1} = 0` and :math:`B_{b,2}\neq 0`.

          *This example has* :math:`B_{b,0} = 0.2`, :math:`B_{b,1} = 0`, :math:`B_{b,2} = 10`
          *and* :math:`\vec{A}=(1,1,1)`, *to define a sphere that has latitudinal modulation with amplitude* :math:`0.2`.

        - Longitudinal waves for :math:`B_{b,1} \neq 0` and :math:`B_{b,2} = 0`.

          *This example has* :math:`B_{b,0} = 0.2`, :math:`B_{b,1} = 10`, :math:`B_{b,2} = 0`
          *and* :math:`\vec{A}=(1,1,1)`, *to define a sphere that has longitudinal modulation with amplitude* :math:`0.2`.

        - Egg carton waves for :math:`B_{b,1} \neq 0` and :math:`B_{b,2} \neq 0`.

          *This example has* :math:`B_{b,0} = 0.2`, :math:`B_{b,1} = 10`, :math:`B_{b,2} = 10`
          *and* :math:`\vec{A}=(1,1,1)`, *to define a sphere that has both latitudinal and longitudinal modulation with amplitude* :math:`0.2`.



3. **Wavy cylinders**

  The two orientation functions :math:`S_{b,1}(\vec{x})` and :math:`S_{b,2}(\vec{x})` have cylic properties with respect to cylinder orientation along the cartesian direction :math:`\hat{x},\hat{y},\hat{z}`.

  If the cylinder is oriented in the

  * :math:`\hat{x}`-direction, then :math:`A_x=0` and :math:`(i,j,k)=(x,y,z)`
  * :math:`\hat{y}`-direction, then :math:`A_y=0` and :math:`(i,j,k)=(y,z,x)`
  * :math:`\hat{z}`-direction, then :math:`A_z=0` and :math:`(i,j,k)=(z,x,y)`

  The orientation functions then take the form,

  .. math::
      :name: eq:spherewavyS1

      \tan S_{b,1}(\vec{x}) &= \frac{A_k x_k - Q_k}{A_j x_j - Q_j} \\
      \tan S_{b,2}(\vec{x}) &= \frac{\sqrt{A_j^2(x_j-Q_j)^2 + A_k^2(x_k-Q_k)^2}}{A_i(x_i-Q_i)}

  The accompanying standard surface :math:`S^S(\vec{x})`, defining the :ref:`cylinder<eq:surfacecylinder>`, has the following form under the cyclic axes,

  .. math::

      S^S(\vec{x}) = \left(x_j-Q_j \right )^2 + \left(x_k-Q_k \right)^2 - R^2 = 0

  .. list-table::
      :header-rows: 0
      :widths: 30 30 30
      :align: center

      * - .. image:: BC/bc_images/LatitudeCylinder.png
              :width: 95%
              :align: center

        - .. image:: BC/bc_images/LongitudinalCylinder.png
              :width: 95%
              :align: center

        - .. image:: BC/bc_images/eggCartonCylinder.png
              :width: 95%
              :align: center

      * - .. Latitudinal waves on cylinder for :math:`B_{b,1} = 0` and :math:`B_{b,2} \neq 0`.

        *This example has* :math:`B_{b,0} = 0.2`, :math:`B_{b,1} = 0`, :math:`B_{b,2} = 10`
        *and* :math:`\vec{A}=(1,1,0)`, *to define a cylinder that has latitudinal modulation with amplitude* :math:`0.2`.

        - Longitudinal waves on cylinder for :math:`B_{b,1} \neq 0` and :math:`B_{b,2} = 0`.

        *This example has* :math:`B_{b,0} = 0.2`, :math:`B_{b,1} = 10`, :math:`B_{b,2} = 0`
        *and* :math:`\vec{A}=(1,1,0)`, *to define a cylinder that has longitudinal modulation with amplitude* :math:`0.2`.

        - Egg-carton waves on cylinder for :math:`B_{b,1} \neq 0` and :math:`B_{b,2} \neq 0`.

        *This example has* :math:`B_{b,0} = 0.2`, :math:`B_{b,1} = 10`, :math:`B_{b,2} = 10`
        *and* :math:`\vec{A}=(1,1,0)`, *to define a cylinder that has both latitudinal and longitudinal modulation with amplitude* :math:`0.2`.
