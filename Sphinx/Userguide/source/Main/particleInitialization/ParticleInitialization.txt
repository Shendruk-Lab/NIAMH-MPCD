.. _ParticleInitialization:

.. _QDIST:

The fluid is determined in the input ``.json`` file and all relevant values need to be declared there.

Basic fluid
===========

Any fluid solved with MPC particles needs to have the following properties initialized. 

Position
--------
qdist specifies how the position of this species' particles are initialised. The available options are to :

- place the particles randomly and freely within the control volume. 

.. code-block:: json

    "qdist":         0,

- read the particles' positions from a file.

.. code-block:: json

    "qdist":         1,

.. note::

    The default value is 0.

.. _VDIST:

Velocity
--------

vdist specifies how the velocity of this species' particles is initialised. The available options are to :

- draw the velocity from an uniformly random distribution. To get uniform must consider from zero to :math:`(2 {\times} K_{B}T/MASS)^{1/2}` for each component. To get the negative velocity we make the interval twice as big and subtract off the original max. 

  .. code-block:: json

      "vdist":         0,

- read the particles' velocities from a file. (HOW DOES THE USER GIVE THIS FILE?)

  .. code-block:: json

      "vdist":         1,

- give all the particles the same initial speed but in different directions. 

  .. code-block:: json

      "vdist":         2,

- give all the particles the same initial speed along each axis in either direction.

  .. code-block:: json

      "vdist":         3,

- draw the particles' velocity from a gaussian distribution scaled by :math:`(K_{B}T/MASS)^{1/2}`
  for each component of the velocity. 

  .. code-block:: json

      "vdist":         4,

.. note::

    The default value is 0.

.. _MASSInitialization:

Mass
----

Mass of this species' particles. To set it, add the following to your input ``.json`` file:

  .. code-block:: console

      "mass":  <value>,

.. note::

    The default value = 1 and it should be **always** be 1 for at least one species since it sets the mass scale .


.. _POP:

Population
----------

It is the total population of the particles of this species. To set it, add the following to your input ``.json`` file: 

.. code-block:: console 

    "pop":    <value>, 


It is equal to control volume :math:`{\times} 20` ( :math:`20 =` the average number of particles in each cell).

.. note::

  The default value is 18000.

.. note::

  "dens" can override it for simple geometries that do not have cut cells, so each cell has :math:`20` particles. 

  To set it, add the following to your input ``.json`` file: 

  .. code-block:: json 

      "dens":    20, 

.. _DAMP:

Damping coefficient
-------------------
A friction coefficient to control hydrodynamics. in other words to go from wet to dry that could be :math:`[0,1]`. To set it, add the following to your input ``.json`` file:

.. code-block:: console 

    "damp":    <value>, 
.. note::

  The default value is 0. 

.. _LEN:


Nematic fluid
=============

The MPC particles can be given nematic orientational symmetry, by setting 

.. code-block:: lc 
  "lc": 1

In that case, the following properties need to be initialized.

.. _ODIST:


Orientation
-----------

odist specifies how the direction of this species' particles is initialised. The available options are to :

- get a unit vector within a sphere distribution. 

  - 3D: Sample the z component on :math:`[{\cos(\pi)}, 1]` and then sample the azimuthal angle, :math:`{\phi}` on :math:`[0, 2{\pi})`.

  - 2D: Simply sample the azimuthal angle homogeneously.

  - 1D: Checks if :math:`{\cos(\phi)}` would be parallel or anti-parallel, returning +1.0 or -1.0.

  .. code-block:: json

      "odist":         0,

- align all particles along X axis. 

  .. code-block:: json

      "odist":         1,

- align all particles along Y axis. 
 
  .. code-block:: json

      "odist":         2,

- align all particles along Z axis. 
 
  .. code-block:: json

      "odist":         3,

- align all particles along 45 degree angle.
 
  .. code-block:: json

      "odist":         4,

- align all particles randomly within XY axis. 
 
  .. code-block:: json

      "odist":         5,

- align all particles randomly within XZ axis. 
 
  .. code-block:: json

      "odist":         6,

- align all particles randomly within YZ axis. 
 
  .. code-block:: json

      "odist":         7,

- align all particles in the direction of origin towards positive right hand corner of any cartesian plane.

 
  .. code-block:: json 

      "odist":         8,

- align all particles in the direction of two oppositely charged defects.

  .. code-block:: json 

      "odist":         9,

.. note::

    The default value is 2.

.. _RFC:


Rotational friction coefficient
-------------------------------

Rotational friction coefficient of this species. To set it, add the following to your input ``.json`` file: 

.. code-block:: console 

    "rfc":    <value>, 

.. note::

  The default value is 0.01.


.. _TUMBLE:

Tumbling parameter
------------------

The tumbling parameter specifiec how the nematogens response to a shear in the flow, if it is ≥ 1 the director field aligns with the flow - such LCs are known as “flow-aligning” , if it is < 1 the director field rotates in the flow continuously – such LCs are known as “flow-tumbling”. To set it, add the following to your input ``.json`` file:

.. code-block:: console 

    "tumble":    <value>, 

.. note::

  The default value is 2.

.. _CHIHI:

Shear susceptibility
--------------------

A heuristic shear coupling coefficient that tunes the alignment relaxation time relative to :math:`{\delta} t`.

To set it, add the following to your input ``.json`` file:

.. code-block:: console 

    "shearSusc":    <value>, 

.. note::

  The default value is 0.5.

.. _CHIA:

Magnetic susceptibility
-----------------------

It is the susceptibility of the director to a magnetic field. To set it, add the following to your input ``.json`` file:

.. code-block:: console 

    "magSusc":    <value>, 

.. note::

  The default value is 0.001.

Length
------

It is the effective length of the nematogens in order to couple the torque on MPCD particle into force on boundaries. The smaller the length of the particle the stronger the force and the longer the particle the weaker the force. To set it, add the following to your input ``.json`` file:

.. code-block:: console 

    "len":    <value>, 
.. note::

  The default value, 0.007, is set.

.. _ACT:

Activity
--------

It sets the type and the magnitude of the force dipole on each MPCD particle. Positive values corresponds to extensile force dipoles and negative values to contractile ones. Each collision operator has a defined region for this activity parameter in which **active** turbulence exists.

To set it, add the following to your input ``.json`` file:

.. code-block:: console 

    "act":    <value>, 

.. note::

  The default value is 0.05.

.. _SIG:

Local activity modulators
-------------------------

:math:`{\sigma}_w` represents how fast should the modulation fall-off as a function of density , should be > 0, ideally around 0.4. 

.. code-block:: console 

    "sigWidth":    <value>,

:math:`{\sigma}_p` is a measure of when modulation should begin, should be in a range 0 to 2, ideally around 0.5. 

.. code-block:: console 

    "sigPos":    <value>,

.. note::

  - The default values are 1.0 for both parameters.

  - The turbulence regime for extensile and contractile are not the same.

.. _MINACTRATIO:

Ratio of active particles
-------------------------

Activity could be applied to a proportion of particles in the cell, the **Minimum** of which is this parameter.  To set it, add the following to your input ``.json`` file:

.. code-block:: console 

    "minActRatio":    <value>,

.. note::

  The default value is 0.

.. _MATRIX:

Multiphase
==========

The MPC particles can also be of different species to induce multi-phases. HOW DO I ACTIVATE THIS?

Interaction matrix
------------------

Each species has a different interaction with all other species in a multiphase fluids and this matrix specifies how ther interact. To set it, add the following to your input ``.json`` file:

.. code-block:: console 

    "interMatr":    <value>,

.. note::
  
  It **Must** be of the same length as the number of species. Default will autopopulate with 0s, [0,...].


In our code up to ten different species are supported.

.. _MAXSPECI:

.. code-block:: console

    # define MAXSPECI 10


  