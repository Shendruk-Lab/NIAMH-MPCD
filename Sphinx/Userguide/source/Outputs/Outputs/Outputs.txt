.. _Outputs:

The MPCD code contains various input flags which can give different outputs. Default is that the output files are turned off, but they can be turned on by flagging them as a non-zero value. This non-zero value is the interval in simulation timesteps for the output. These different outputs can be classified as following:

1. Fields. Local course-grained data which varies spatially over MPCD boxes. This is outputted as time, than the cell positition QX, QY, QZ and than course-grained values.
2. Trajactories Gives the position QX, QY, QZ, the velocity VX, VY, VZ and the orientation OX, OY, OZ, orientation OX, OY, OZ (if relevant) and rotational velocity LZ, LY, LZ of various objects with the same idea as it evolves in time.
3. Averages. Simulation averaged date over the entire box. This is outputted as time and than averaged value.
4. Distribution. Outputs the probability distribution of a field at a certaint time. The number of bins is set by BINS (set to 101) in definition.h. Range is 0 (or minimum if more relavant for the exact field) and maximum field value.
5. Autocorrelaion. Output contains the spatial auto-correlation function of a current instantanious field in radial coordinates with unit spacing in MPCD units. 
6. miscellaneous.

Fields
=============

::

    `coarseOut`     | int           | 0             | Coarse grain data (cell velocity, densities, density of each species) field

This creates file named coarsegrain, which contains the field values for the coarse grained cell current population and current explicited velocity data. 

::

    `flowOut`       | int           | 0             | Flow field averaged between output times

This creates file named flowfield, which contains the field values for the time-averaged velocity data (averaged over the timewindow between outputs). 


::

    `velOut`        | int           | 0             | Instantaneous velocity field.

This creates file named velfield, which contains the field values for the current explicited velocity data. 

::

    `dirSOut`       | int           | 0             | Director and scalar order parameter fields

This creates file named directorfield, which contains the field values for the local nematic order and director.

::

    `qTensOut`      | int           | 0             | Q tensor field

This creates file named ordertensor, which contains the field values for the local Q tensor values.

::

    `qkTensOut`     | int           | 0             | Reciprocal Q tensor field

This creates file named recipOrder, which contains the field values for the local reciprocal space order parameter.

::

    `oriEnOut`      | int           | 0             | Orientational energy field

This creates file named enfield, which contains the field values for the local orientation interaction energy (if system is liquid crystal) and kinetic energy of the MPC fluid. Not MD or swimmers.

::

    `colourOut`     | int           | 0             | Colour/ phi/ species-type field
    
This creates file named multiphase, which contains the field values for the local species type of MPCD particle, colour, and multiphase phi parameter. 

::

    `pressureOut`     | int           | 0             | Colour/ phi/ species-type field

This creates file named pressure, which contains the field values for the local streaming pressure (pre-collision) and collision pressure (after collision) of the MPC fluid. Not MD or swimmers.


::

    `energyOut`     | int           | 0             | System energy field

This creates file named energy, which contains the field values for the local nematic, kinetic and boundary energy contributions. The thermal energy and rotational energy at the boundary are also output.

::

    `topoFieldOut`  | int           | 0             | Topological charge field

This creates file named topochargefield, which contains the local topological charge and orientation of the nematic fluid. Only works in 2D.
::

    `disclinOut`    | int           | 0             | Disclination tensor field

This creates file named disclinTensorfield, which outputs the three-dimensional disclination tensor data based on [Disclination]_.

Trajectories
============
::

    `solidTrajOut`  | int           | 0             | Solid BC trajectories

This creates file named solidtraj, which outputs the trajectory of all moveable solid boundaries. Every obstacle gets their own file designated with a suffix.


::

    `trajOut`       | int           | 0             | Detailed particle trajectories for every particle of species type given by `trajSpecOut`
    `trajSpecOut`   | int           | 0             | Which number of species whose detailed trajectories to output

This creates file named detailedSP, which outputs the trajectory of all the particles of species defined in trajSpecOut (the number indicates how many species one needs to write out). Every species gets their own fule designated with a suffix.


::

    `defectsOut`    | int           | 0             | Defect positions and orientations

This creates file named defects. It contains the position of topological defects found from grouping and averaging the non-zero topological field values and then tracking them. Function outputs coordinates, charge and angle of defect. Only works in 2D.
::

    `swimQOut`      | int           | 0             | Swimmer positions

This creates file named swimmers. It contains the position and velocity of all swimmers. It also contains if the particle is in the run, tumble, shring or extension phase.
::

::

    `swimOOut`      | int           | 0             | Swimmer orientations

This creates file named swimmersOri. It contains the orientation of all swimmers. It also contains if the particle is in the run, tumble, shring or extension phase.


Averages
========
::

    `avVelOut`      | int           | 0             | Total average MPCD velocity. System-averaged single value

This creates file named avVel, which contain the average current explicited velocity.

::

    `neighbourEnOut`| int           | 0             | Orientational energy from neighbours. System-averaged single value

This creates file named enneighbours, which contain the total energy based on the local director and tensor order parameter per cell.

::

    `avSOut`        | int           | 0             | Total average scalar order parameter. System-averaged single value

This creates file named avS, which contain the average nematic order.

::

    `densSDOut`     | int           | 0             | SD of the number per cell. System-averaged single value

This creates file named densSTD, which contain the standart deviation of the density of all the cells.

::

    `enstrophyOut`  | int           | 0             | Enstrophy field
    
This creates file named avEnstrophy, which contains the average enstrophy (mean squared vorticity) of all the cells.

Averages
========

::

    `histVelOut`    | int           | 0             | Velocity distribution

This creates file named distVel, which contains the distribution of velocity vector.


::

    `histSpeedOut`  | int           | 0             | Speed distribution

This creates file named distSpeed, which contains the distribution of speed (magnitude of velocity).

::

    `histVortOut`   | int           | 0             | Vorticity distribution

This creates file named distVort, which contains the distribution of vorticity vector.


::

    `histEnsOut`    | int           | 0             | Enstrophy distribution

This creates file named distEnstrophy, which contains the distribution of enstrophy magnitude.


::

    `histDirOut`    | int           | 0             | Director distribution

This creates file named distDir, which contains the distribution of director vector.


::

    `histSOut`      | int           | 0             | Scalar order parameter distribution

This creates file named distS, which contains the distribution of nematic order magnitude.


::

    `histNOut`      | int           | 0             | Number per cell distribution

This creates file named distDens, which contains the distribution of number of particles in cells.


Autocorrelaion
==============
::

    `velCorrOut`    | int           | 0             | Velocity autocorrelation (radial function)

This creates file named corrVelVel, which contains spatial autocorrelation for the field velocity.
::

    `dirCorrOut`    | int           | 0             | Director autocorrelation (radial function)

This creates file named corrDirDir, which contains spatial autocorrelation for the director field.

::

    `vortCorrOut`   | int           | 0             | Vorticity autocorrelation (radial function)

This creates file named corrVortVort, which contains spatial autocorrelation for the vorticity field.


::

    `densCorrOut`   | int           | 0             | Densty autocorrelation (radial function)

This creates file named corrDensDens, which contains spatial autocorrelation for the density (number of mpcd particles per cell)


::

    `orderCorrOut`  | int           | 0             | Scalar order parameter autocorrelation (radial function)

This creates file named corrOrderOrder, which contains spatial autocorrelation for the nematic order parameter.

::

    `phaseCorrOut`  | int           | 0             | Binary fluid correlation (radial function)

This creates file named corrPhiPhi, which contains spatial autocorrelation for the phase field phi. As of now, doesn't work (commented out).

::

    `energySpecOut`  | int           | 0             | Energy spectra  (radial function)

This creates file named energySpectrum, which contains Fourier transformation of the velocity autocorrelation function (energy spectra).

::

    `enstrophySpecOut`| int           | 0             | Enstrophy spectra (radial function)

This creates file named enstrophySpectrum, which contains Fourier transformation of the vorticity autocorrelation function (enstrophy spectra).

miscellaneous
=============
::

    `binderOut`     | int           | 0             | Binder cumulant
    `binderBin`     | int           | 0             | Binder cumulant bin size

This creates file named binderCumulant, which outputs the binder cumulant over an instantanious field. The Binder cumulant is calculated over the orientation parameter (velocity if isotropic fluid) for bin size defined in binderBin. [Binder]_

::

    `swimROut` OR `swimRTOut`| int           | 0             | Swimmer run/ tumble. `swimRTOut` is prioritised

This creates file named runtumble. This prints the signed angle which is the swimmers current orientations makes with their initial orientations, everytime it ends its tumbling/running phase. It also contains the time it is has spend tumbling. Set to 0 (off) or 1 (on)



::

    `synopsisOut`   | int           | 1             | Synopsis output. Highly recommended to be on. 1 = on, 0 = off

This creates file named synopsis.dat, which contains the entire synopsis output.

    
.. rubric:: Reference

.. [Disclination]     <a href="https://pubs.rsc.org/en/content/articlelanding/2022/SM/D1SM01584B">C Schimming and J Vinals</a>.
.. [Binder]     See https://en.wikipedia.org/wiki/Binder_parameter.