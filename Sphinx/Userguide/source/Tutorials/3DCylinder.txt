This tutorial will show how to run a MPCD simulation confined within an impermeable cylinder. It is 

* an isotropic fluid
* in 3D
* with no flow or external forces
* and no solutes
* contained within a cylinder along x direction with 
    * periodic boundary conditions at both ends
    * perfect slip at walls

This tutorial is based on the input file found in ``MPCD/SampleInputs/3DCylinder/input.json``.

Input File
==========

.. collapse:: input.json

    ::

        {
            "comment":          "cuboid geometry",
            "domain":           [20, 10, 10],
            "comment":          "To have PBCs at walls of the cuboid geometry on top of a cylider within this geometry",
            "domainWalls":      1,
            "simSteps":         500,
            "comment":          "Isotropic fluid using Andersen MPCD",
            "collOp":           2,
            "species":
            [
                {
                    "comment":     "The total number of particles in a cylider = \pi * r^2 * L * 20",
                    "pop":         20106
                }
            ],
            "debugOut":         3,
            "flowOut":          20,
            "energyOut":        0,
            "synopsisOut":      1,
            "comment":          "BC for a cylinder with two periodic ends and impermeable perfect-slip walls",
            "BC":
            [
                {
                    "comment":      "Since the particle are transfering momentum to the walls",
                    "E":            1,
                    "comment":      "The position of the center of the base circle C lying in the yz-plane",
                    "Q":            [0, 5, 5],
                    "aInv":         [0, 1, 1],
                    "P":            [2, 2, 2, 2],
                    "comment":      "The radius of the cylinder",
                    "R":            4,
                    "comment":      "The normal component of velocity is reversed",
                    "MVN":          -1,
                    "comment":      "The tangent component of velocity is kept what it was",
                    "MVT":          1,
                    "comment":      "To have the particles inside the cylinder",
                    "inv":          1
                }
            ]
        }

Understanding the Script
========================

Here is the breakdown of the input script.

::

    {
        "comment":          "cuboid geometry",
        "domain":           [20, 10, 10],
        "comment":          "To have PBCs at walls of the cuboid geometry on top of a cylider within this geometry",
        "domainWalls":      1,
        "simSteps":         500,
        "comment":          "Isotropic fluid using Andersen MPCD",
        "collOp":           2,

We first define the system size (:math:`20 \times 10 \times 10` in MPCd units). The `"domainWalls": 1,` is to add extra periodic boundary conditions on the domain walls, on top of the defined cylinder boundaries. Then it is specified how long the simulation will run and output data.  To have an Isotropic fluid the Andersen collision operator is used.

::

    "species":
    [
        {
            "comment":     "The total number of particles in a cylider = \pi * r^2 * L * 20",
            "pop":         20106
        }
    ],

Here, we set the total number of particles inside the cylinder using the its volume and average number of particles in each MPCD cell. The radius of cylinder , :math:`r = 4` (it is enetred later in `BC` part) and its length, :math:`L = 20` (the length of the cuboid) :math:`\text{pop} = \pi r^2L * 20 \approx 20106`.

::

    "debugOut":         3,
    "flowOut":          20,
    "energyOut":        0,
    "synopsisOut":      1,

We now define what things we want to write out during the simulation (see output for details). We use debugOut level 3. We write out the flow field every 20 timesteps. 
We don't write out the energy in this example, but that can be turned on. We also include a synopsis file.

::

    "comment":          "BC for a cylinder with two ends and impermeable perfect-slip walls",
    "BC":
    [
        {
            ..
        }
    ]

Now we define BC. (See Boundary Conditions for more details) Remember, that this needs to be between [].

::

            "E":            1,

Since particles are transferring momentum to the walls.

Now lets see how a cylinder could be defined. Standard surfaces have the form,

.. _shape:

.. math::

    S^S(\vec{x})=[A_x\left(x-Q_x\right)]^{p_x} + [A_y\left(y-Q_y\right)]^{p_y} + [A_z\left(z-Q_z\right)]^{p_z} - R^{p_R} = 0

where the surface parameters represent the surface position's :math:`\vec{Q}=(Q_x,Q_y,Q_z)`,
surface coefficient's :math:`\vec{A}=(A_x,A_y,A_z)`, surface power's :math:`(p_x,p_y,p_z,p_R)` and radius :math:`R`.

For this example, the cylinder is along the x axis meaning its base circle is lying in the yz-plane, so  :math:`\vec{Q}=(0,Q_y,Q_z)`, surface power's :math:`(2,2,2,2)` , :math:`\vec{A}=(0,1,1)` and  radius :math:`R`.

::

            "Q":            [0, 5, 5],
            "aInv":         [0, 1, 1],
            "P":            [2, 2, 2, 2],
            "R":            4,

.. note::

    For a thorough explanation about different surfaces please check :ref:`Standard surfaces <subsection_boundarysurfaces>`.

The next part deals with how the velocity of particles changhes when they collide with the walls of the cylinder. In this case to creat the perfect slip boundary conditions just the normal component is reversed.

::

            "comment":      "The normal component of velocity is reversed",
            "MVN":          -1,
            "comment":      "The tangent component of velocity is kept what it was",
            "MVT":          1,

And finally to have the particles inside this volume. 

::

            "inv":          1

The end of the input file.

::

    }

Running
=======

This script can be run with 

::

    /<directory>/MPCD/mpcd.out -i <directory>/MPCD/SampleInputs/3DCylinder/input.json <directory>/MPCD/3DCylinder/<OUTPUT>