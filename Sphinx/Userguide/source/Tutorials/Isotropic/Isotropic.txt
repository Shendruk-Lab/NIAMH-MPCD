
This tutorial will show how to run the most basic MPCD simulation conceivable:

* an isotropic fluid
* in 2D
* with no flow or external forces
* and no solutes
* contained within periodic boundary conditions.

This is simply a thermalized fluid to introduce how the input files works for first time users. 

This tutorial is based on the input file found in ``MPCD/SampleInputs/01_FirstSimulation_PassiveIsotropic2D/input.json``.

Input File
==========

::

    {
        "comment":          "SIMULATION-SCALE INPUTS",
        "comment":          "Small, square geometry --- Regardless of boundary conditions, you need to specify the simulation box size",
        "domain":           [50, 50],
        "comment":          "Number of simulation steps to perform in the simulation --- this is in iterations; not MPCD time units",
        "simSteps":         1000,
        "comment":          "Number of times steps to perform prior to outputting data --- this allows the system to reach equilibrium or steady state",
        "warmUp":           0,
        "comment":          "Streaming time step in MPCD time units",
        "dt":               0.1,
        "comment":          "Isotropic fluid using Andersen MPCD",
        "collOp":           2,
        "comment":          "MPCD relies on generating random numbers. If need to repeat a simulation exactly can set random seed by hand. seed==0 generates a 'random' random seed",
        "seed":             0,
        "comment":          "FLUID PARTICLE SPECIES INPUTS",
        "comment":          "All the information regarding the chemical species --- can have multiple species but commonly just one species",
        "species":
        [
            {
                "comment":      "pop sets the total number of particles of this type in the simulation. Given the system size this sets an average cell density of 20 particles per MPCD cell, which is is standard",
                "pop":         50000,
                "comment":      "An equivalent to the above line is ''dens': 20'",
                "comment":      "Mass of particles",
                "mass":         1,
                "comment":      "Initial velocity distribution --- MPCD quickly thermalizes due to thermostate. 0==isorandom; 4==Gaussian dist",
                "vDist":        0
            }
        ],
        "comment":          "All the above species information is the DEFAULT --- therefore, extraneous and could have left out",
        "comment":          "BOUNDARY CONDITION INPUTS",
        "c":                "BCs are four periodic boundary conditions (PBC) at the edges of the system box",
        "BC":
        [
            {
                "c":            "Left PBC",
                "phantom":      0,
                "comment":      "Position of BC",
                "Q":            [0, 0, 0],
                "comment":      "Direction/surface normal",
                "aInv":         [1, 0, 0],
                "comment":      "Power on terms --- 1==plane, 2==sphere or ellipsoid, etc",
                "P":            [1, 1, 1, 1],
                "comment":      "Constant term --- typically, radius for spheres",
                "R":            0,
                "comment":      "PBCs displace/shift/teleport the particles in the normal direction",
                "DN":           50,
                "comment":      "PBCs do NOT modify particle positions in the tangential direction",
                "DT":           0,
                "comment":      "PBCs do NOT modify particle velocity in either the normal or tangential directions --- MVN=multiplicative factor in normal direction; MVT=multiplicative factor in tangential direction",
                "MVN":          1,
                "MVT":          1
            },
            {
                "c":            "Right PBC",
                "phantom":      0,
                "Q":            [50, 0, 0],
                "aInv":         [-1, 0, 0],
                "P":            [1, 1, 1, 1],
                "R":            0,
                "DN":           50,
                "MVN":          1,
                "MVT":          1
            },
            {
                "c":            "Bottom wall",
                "phantom":      1,
                "Q":            [0, 0, 0],
                "aInv":         [0, 1, 0],
                "P":            [1, 1, 1, 1],
                "R":            0,
                "DN":           50,
                "MVN":          1,
                "MVT":          1
            },
            {
                "c":            "Top wall",
                "phantom":      1,
                "Q":            [0, 50, 0],
                "aInv":         [0, -1, 0],
                "P":            [1, 1, 1, 1],
                "R":            0,
                "DN":           50,
                "MVN":          1,
                "MVT":          1
            }
        ],
        "comment":          "The above is just PBCs and since this is a standard BC, all those lines could be replaced by just ``domainWalls':1' sets PBCs around the domain",
        "comment":          "Furthermore, `domainWalls':1' is the default so even that is extraneous and could have left out",
        "comment":          "OUTPUTS",
        "comment":          "There are very many things that can be outputted but you will never need all of the possible output, so specify what to output",
        "comment":          "ALWAYS output a synopsis file so that you can check if the simulation is really what you thought it was",
        "comment":          "Synopsis file also includes info like the viscosity of the fluid based on input parameters",
        "synopsisOut":      1,
        "comment":          "debugOut specifies how much information is writen to the terminal. When programming you might want lots, when running small, local, simulations you might want a little (like just writing the current time step; debugOut==3) but when running on a cluster/super computer you don't want any (debugOut==0)",
        "debugOut":         3,
        "comment":          "All other outputs are NOT outputted if zero. If not zero, then they output data at a frequency determined by their value",
        "comment":          "Checkpointing dumps ALL simulation information so that the simulation can be restarted from a fail point. Only use for big, important simulations",
        "checkpointOut":    999,
        "comment":          "Output the average velocity every 10 iterations",
        "avVelOut":         10,
        "comment":          "Contributions to energy",
        "energyOut":        10,
        "comment":          "Standard deviation of density",
        "densSDOut":        10,
        "comment":          "Instantaneous flow field --- notice that fields are much large data files than global values",
        "velOut":           50,
        "comment":          "Pressure field",
        "pressureOut":      0,
        "comment":          "Histogram of velocities",
        "histVelOut":       100,
        "comment":          "Histogram of speed",
        "histSpeedOut":     100,
        "comment":          "Histogram of number of particles per cell",
        "histNOut":         100,
        "comment":          "Velocity-velocity autocorrelation function --- autocorrelation functions are costly to calculate so beware of including",
        "velCorrOut":       100,
        "comment":          "Density-density autocorrelation function",
        "densCorrOut":      100
    }


Running
=======

This script can be run with 

::

    /<code-directory>/MPCD/mpcd.out -i <code-directory>/MPCD/SampleInputs/01_FirstSimulation_PassiveIsotropic2D/input.json <output-directory>/MPCD/<OUTPUT>



Understanding the Script
========================

In this first script, many options are being included for the purpose of introducing them --- in future tutorials and when users create their own scripts, often default values will be used and so the arguments can be left out. 

.. warning::
    This tutorial goes through this basic input script line-by-line to explain each argument. 

Here is the breakdown of the input script. 

::

    {
        "comment":          "SIMULATION-SCALE INPUTS",

The input arguments must all be contained between curly brackets ``{}`` --- The first line is the opening bracket. 
Arguments are given in quotation marks ``""``, followed by a colon ``:`` then the argument and concluded with a comma ``,`` to indicate that an subsequent argument will follow. 
``"comment"`` is an example tag, which allows users to comment their input scripts, for their own reference. 
If a given argument does not exist then the simulation will exit and give the warning

::

    JSON Read Warning: Found unrecognised json tag: commental. Tag will be ignored.
    JSON Read Error: Errors found.

Comments can be left using the tags ``"comment"``, ``"c"``, ``"//"``, or ``"#"``. 

::

        "domain":           [50, 50],

The domain is set to :math:`50\times50`. 
The dimensionality is determined to be 2D from the length of the domain array. 
A 3D simulation of a :math:`50\times50\times50` domain would instead set 

::

        "domain":           [50, 50, 50],

.. note:: 
    Setting the domain for the simulation **does not** set the boundary conditions. 
    Boundary conditions must be set independently, later in the ``.json`` file. 

::

        "simSteps":         1000,

The number of simulations steps tells the simulation how many iterations to loop over. 
This value should be an integer. 

.. note:: 
    ``"simSteps"`` is in iterations/steps, **not the time in MPCD units** Ï„ (see :ref:`Derived units <derivedUnits>`). 

::

        "warmUp":           0,

The code can also run for warmup phase (for a number of iterations ``"warmUp"``) prior to the productions phase (of ``"simSteps"`` iterations). 
In the warmup phase, the simulation runs but results are not outputted, allowing the simulation to achieve equilibrium or steady state prior to writing data. 

::

        "dt":               0.1,

The streaming time step ``"dt"`` in MPCD units (see :ref:`Derived units <derivedUnits>`). 
Varying the streaming time, will modify the (see :ref:`transport coefficients <chapterVisc>`). 

::

        "collOp":            2,

To set the MPCD collision operator (see :ref:`Collision operators <chapterCollOp>`) one uses the tag ``"collOp"`` or ``"rTech"`` (which are aliases). 
By choosing ``2`` here, the collision operator is being set to the basic Andersen thermostatted operator (see :ref:`Andersen-thermostatted MPCD <Andersen>`). 
Many other options are available, including :ref:`SRD <SRD>` (``"collOp": 0`` or ``1``), :ref:`angular-conserving Andersen thermostatted MPCD <Andersen>` (``"collOp": 3``) and :ref:`others <chapterCollOp>`. 

::

        "seed":            0,

Since the collision operators stochastically exchange properties between particles within the same cell, MPCD relies heavily on generating random numbers. 
Setting ``"seed": 0`` generates a 'random' random seed by combing microseconds from the clock and the process id. 
If one wishes to repeat a simulation exactly, they can set random seed by hand. 
The seed used by a simulation is written to ``synopsis.dat`` (see :ref:`Outputs <Outputs>`). 

::

        "species":
        [
            {
                <arguments>
            }
        ],

To set the particle properties (see :ref:`Particle properties <chapterParticles>`) and initializations (see :ref:`Initialization <chapterInit>`), the particles are divided into species. 
For multiphase flows (see :ref:`Multiphase <chapter10>`), the simulation can include multiple species, but typically only a single fluid species is required. 
Within ``"species"``, the particle properties and initializations are specified. 

::

        "species":
        [
            {
                "pop":         50000,
            }
        ],

``"pop"`` sets the total number of particles of this species type in the simulation. 
Since the simulation volume is :math:`50\times50`, this produces a density of ``20`` particles per cell. 
A density of ``20`` particles per MPCD cell is a standard choice (earlier studies would previously use ``5``). 
``"dens"`` is an alternative to ``"pop"`` for setting the average cell density (see :ref:`Overrides <Overrides>`). 

::

        "species":
        [
            {
                "mass":         1,
            }
        ],

The mass of individual MPCD particles is set by ``"mass"``. 

.. warning:: 
    The MPCD particle mass is a **fundamental unit** (see :ref:`Fundamental units <set_values>`). 
    Like thermal energy :math:`k_\text{B}T` and cell size :math:`a`, mass should *always* be set to unity. 
    However, to allow :ref:`multiphase fluids <chapter10>` to have different material properties it is technically allowed to vary. 

::

        "species":
        [
            {
                "vDist":        0
            }
        ],

In addition to setting the properties of the species, the initializations are also set here. 
MPCD quickly thermalizes and so the choice for the initial velocity distribution should have little consequence. 
Typical choices are ``"vDist": 0`` for isotropically random and ``4`` for Gaussian distributions of the components. 
Because this is the last argument within this `"species"`, there is no comma at the end of this line. 

.. note::
    All of the species arguments given above are the **DEFAULT**; therefore, they are all extraneous and could have been completely left out. 

::

        "BC":
        [
            {
                <arguments for first BC>
            },
            {
                <arguments for 2nd BC>
            },
            {
                <arguments for 3rd BC>
            },
            {
                <arguments for 4th BC>
            }
        ],

In this example, there are four boundary conditions (BC), each given as an element of the array set by the argument ``"BC"``. 
Boundary coditions must always be set to contain the domain (though overrides exist for convienence, see :ref:`Overrides <Overrides>`). 
In this case, four periodic boundary conditions (PBC) are set at the edges of the domain. 
The first BC is the left-hand PBC. 

::

        "BC":
        [
            {
                "phantom":      0,
                "Q":            [0, 0, 0],
                "aInv":         [1, 0, 0],
                "P":            [1, 1, 1, 1],
                "R":            0,
            },

As described in :ref:`Boundary conditions <chapterBC>`, boundaries are composed of (i) :ref:`surfaces <subsection_boundarysurfaces>` and (ii) :ref:`rules <subsection_boundaryrules>`. 
The arguments above set the :ref:`boundary surface <subsection_boundarysurfaces>` for a planar surface:

* No phantom particles are required for PBCs. 
* Position vector ``"Q"``. Here, the left-hand PBC passes through the origin. 
* Inverse of the surface normal ``"aInv"``. The inverse is used because it is more convienent for ellipses and similar surfaces, while equivalent to the normal itself for planes and spheres. Here, the left-hand BC has a surface normal pointing in the +x direction. The sign matters since particles on the positive side of a surface are in accessible space, while particles on the negative side will trigger the :ref:`boundary rules <subsection_boundaryrules>`. 
* Power on the terms in the surface equation ``"P"`` for the x-, y- and z-components and the constant term. Powers of ``1`` correspond to a plane, ``2`` to a sphere or ellipsoid, etc... Here, the planar PBC has powers of ``1`` on all terms. 
* The constant term ``"R"``, typically employed for the radius of spheres. Here, it is zero. 

::

        "BC":
        [
            {
                "DN":           50,
                "DN":           0,
                "MVN":          1,
                "MVT":          1
            },

As described in :ref:`Boundary rules <subsection_boundaryrules>`, when a particle impinges on a boundary surface, a set of rules will be applied to the particle. 

* For PBCs, particle position is shifted in the normal direction as set by ``"DN"``. The value should match the system size in the normal direction, which in this case is ``50``. 
* For PBCs, particle position is *not* shifted in the tangential direction and so ``"DT": 0``. 
* Similarly, PBCs do not modify particle velocity; therefore, the multiplicative factors on the velocity are set to unity:
    * ``"MVN"`` is the multiplicative factor in normal direction
    * ``"MVT"`` is the multiplicative factor in tangential direction.

::

            {
                "c":            "Right PBC",
                "phantom":      0,
                "Q":            [50, 0, 0],
                "aInv":         [-1, 0, 0],
                "P":            [1, 1, 1, 1],
                "R":            0,
                "DN":           50,
                "MVN":          1,
                "MVT":          1
            },
            {
                "c":            "Bottom wall",
                "phantom":      1,
                "Q":            [0, 0, 0],
                "aInv":         [0, 1, 0],
                "P":            [1, 1, 1, 1],
                "R":            0,
                "DN":           50,
                "MVN":          1,
                "MVT":          1
            },
            {
                "c":            "Top wall",
                "phantom":      1,
                "Q":            [0, 50, 0],
                "aInv":         [0, -1, 0],
                "P":            [1, 1, 1, 1],
                "R":            0,
                "DN":           50,
                "MVN":          1,
                "MVT":          1
            }
        ],

The other three BCs are the same but must pass through appropriate points by setting ``"Q"`` and have surface normals that point in the correct (signed) directions by setting ``"aInv"``. 

.. note::
    There exists an :ref:`override <Overrides>` to conveniently set:

    * PBCs 
        * ``"domainWalls":1``
    * impermeable, no-slip planar walls
        * ``"domainWalls":0``
    
    which match the simulation domain size ``"domain"``. 

::

        "synopsisOut":      1,

The ``.json`` input file also sets the outputs. 
There are many optional outputs things that can be outputted but one should never output all possible outputs. 
However, one option that should always be outputted is the synopsis file. 
This little text file reports all the inputs the code has used, as well as summary information about the simulation. 
The ``synopsis.dat`` file allows users to directly check if the simulation is really what was intended. 

::

        "debugOut":         3,

``"debugOut"`` specifies the verbosity with which information is writen to the terminal. 
When running small local simulations, one might want a little (such as the current time step; ``''debugOut": 3``) but when generating data for long simulations or running on a cluster, one might not want any (``''debugOut": 0``)

::

        "checkpointOut":    999,

All outputting up to this point, use flags, while all other outputs are **not** outputted if zero and outputted at a frequency determined by their value numerical value. 
For example, the simulation is :ref:`checkpointed <Checkpointing>` every 999 iterations/steps. 
These are given in iterations, not in MPCD time units. 

Checkpointing dumps *all* simulation information so that the simulation can be restarted from a fail point. 
Checkpointing should be used sparingly since writing this data takes computational time and the resulting checkpoint files are large. 
This is only recommended for simulations that will take substantially longer than a week. 

::

        "avVelOut":         10,
        "energyOut":        10,
        "densSDOut":        10,

These three arguments output the average velocity ``"avVelOut"``, contributions to energy ``"energyOut"`` and Standard deviation of density ``"densSDOut"`` every 10 iterations". 

::

        "velOut":          50,
        "pressureOut":      0,

These two arguments output two instantaneous fields: the instantaneous velocity field ``"velOut"`` and the pressure field ``"pressureOut"``. 

.. note::
    Fields are much larger data files than global values and so one should choose the output rate appropriately. 

::

        "histVelOut":       100,
        "histSpeedOut":     100,
        "histNOut":         100,

Histograms can be outputted as well. 
Here, the velocity ``"histVelOut"``, speed ``"histSpeedOut"`` and density ``"histNOut"`` are output every 100 time steps. 

.. note::
    The distribution of instantaneous values for the 100th step are outputted (non-cumulative). 
    Therefore, the instantaneous range will vary slightly between output times and the ranges must be merged to produce a time averaged distribution. 
    One example of doing this for scalar values is available in ``/analysisScripts/probDistScalar.py`` and for vector values in ``/analysisScripts/probDistVector.py``

::

        "velCorrOut":       100,
        "densCorrOut":      100

A variety of **spatial** autocorrelation functions can be out putted. Here, the velocity-velocity and density-densioty spatial autocorrelation functions are output every 100 time steps.
Autocorrelation functions are relatively costly to calculate so beware of outputting these overly frequently. 

.. note::
    Spatial correlation functions are build into the code but temporal correlation functions are not, because the code does not preserve past states. 
    Users must calculate temporal correlation functions from outputted data using their own analysis routines. 

::

    }

Finally, the closing bracket for the arguments must end the file. 
Also note there should be no comma after the final argument (in this example ``"densCorrOut": 100``)
